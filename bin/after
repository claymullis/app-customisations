#!/usr/bin/env python
# a friendlier `sleep`
# Parses arguments for time units, and sleeps for the sum of all
# time units specified. A time-unit can be given as two tokens
# or one, e.g:
# after 2 seconds
# after 2s
# after 8 minutes, 5 sec
#
# (commas are ignored)


import sys
import re
import time

def line(msg):
	print "[at %s] %s" % (time.strftime('%H:%M:%S'), msg)

def dupe(base):
	return [base, "%ss" % (base,)]

def seconds(num):
	return num

def minutes(num):
	return num * 60

def hours(num):
	return minutes(num) * 60

alias_map = {
	minutes: ['m'] + dupe('min') + dupe('minute'),
	seconds: ['s'] + dupe('sec') + dupe('seconds'),
	hours: ['h'] + dupe('hr') + dupe('hours'),
}
num_then_unit = re.compile('^([0-9.]+)([a-z]+)$')

def converter(alias):
	for this_converter, aliases in alias_map.items():
		if alias in aliases:
			return this_converter
	raise TypeError("invalid time unit: %s" % (alias))

def number(s):
	try:
		return float(s)
	except ValueError:
		raise ValueError("Invalid number: %s" % (s,))

def pop_time_unit(args):
	match = num_then_unit.match(args[0])
	if match:
		args.pop(0)
		num = match.group(1)
		units = match.group(2)
	else:
		if len(args) < 2:
			raise ValueError("expected two terms to remain, got %s" % (len(args),))
		num = args.pop(0)
		units = args.pop(0)
	# print "   %s %s => %s" % (num, units, additional)
	return int(converter(units)(number(num)))

def main(args = None):
	if args is None:
		args = sys.argv[1:]
	if len(args) == 0:
		raise RuntimeError("You must supply a time period")
	total = 0

	# lowercase, normalise spaces, and remove any commas
	remaining = ' '.join(args).lower().replace(',','').split()
	while len(remaining) > 0:
		total += pop_time_unit(remaining)
	
	line("sleeping for \"%s\" (%s seconds)" % (' '.join(args), total))
	time.sleep(total)
	line("awake!")

if __name__ == '__main__':
	try:
		main()
	except StandardError, e:
		print "Error: " + str(e)
		sys.exit(2)
	except KeyboardInterrupt, e:
		print
		line("cancelled.")
		sys.exit(1)
		
