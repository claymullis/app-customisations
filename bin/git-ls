#!/usr/bin/env python

import os
import sys
from collections import defaultdict
import optparse

def _need(lib):
	print >> sys.stderr, "ERROR: You need to install the %s python library to use this tool" % (lib,)
	sys.exit(1)
try:
	import git
except ImportError:
	_need('gitpython')
try:
	import termstyle as col
except ImportError:
	_need('termstyle')

def isdir(*parts):
	return os.path.isdir(os.path.join(*parts))

def split_args(args):
	is_opt = lambda x: x.startswith('--')
	is_not_opt = lambda x: not is_opt(x)
	
	args = filter(is_opt, args)
	paths = filter(is_not_opt, args)
	
	args = [arg[2:] for arg in args]
	return args, paths

def main():
	p = optparse.OptionParser("usage: %prog [options] [dir1 [dir2 [...]]]", add_help_option=False)
	p.add_option('--refresh', action='store_true')
	p.add_option('--helpme', action='help', help='print this text')
	p.add_option('--ahead', action='store_true')
	p.add_option('--dirty', action='store_true')
	p.add_option('--all', action='store_true', help='list all directories, not just git repos')
	p.add_option('--depth', type="int", help='search DEPTH directories deep to find git repos', default=1)
	opts, paths = p.parse_args()
	
	if len(paths) <= 0:
		paths = ['.']
	
	if should_list_children(paths):
		dirs_and_repos = get_all_dirs_and_repos(paths, opts.depth)
	else:
		dirs_and_repos = zip(paths, map(get_repo, paths))
	
	for file_, repo in dirs_and_repos:
		#repo = get_repo(file_)
		if repo is None:
			if opts.all:
				print fmt_repo(None, file_)
			continue
		if opts.refresh:
			for remote in remotes(repo):
				try:
					repo.git.fetch(remote)
				except git.errors.GitCommandError:
					print >> sys.stderr, "# %s: couldn't fetch remote \"%s\"" % (repo.wd, remote,)
		try:
			if opts.ahead:
				divergences = [divergence for url, divergence in remote_info(repo)]
				if not (repo.is_dirty or (divergences and all(map(lambda x: x > 0, divergences)))):
					continue
			if opts.dirty:
				if not repo.is_dirty:
					continue
			print fmt_repo(repo, file_)
		except git.errors.GitCommandError:
			print >> sys.stderr, "Error processing %s" %(file_,)
			import traceback
			traceback.print_exc(file=sys.stderr)

def should_list_children(paths):
	return not any([isdir(path, '.git') for path in paths])

def get_all_dirs_and_repos(bases, depth):
	def is_repo(repo, fullpath):
		return repo is not None and os.path.abspath(fullpath) == os.path.abspath(repo.wd)

	def _get_dirs(base, depth):
		for file in os.listdir(base):
			fullpath = os.path.join(base, file)
			if os.path.isdir(fullpath) and not file == '.git':
				repo = get_repo(fullpath)
				if is_repo(repo, fullpath):
					yield (fullpath, repo)
				if depth > 1:
					for item in _get_dirs(fullpath, depth-1):
						yield item

	for base in bases:
		for item in _get_dirs(base, depth):
			yield item


def get_repo(path):
	try:
		repo = git.Repo(path)
		branch = repo.active_branch # make sure it's initted
		return repo
	except (git.InvalidGitRepositoryError, git.errors.GitCommandError):
		return None

def fmt_repo(repo, path):
	if path == '.':
		if repo is not None:
			path = (repo.wd)
		else:
			path = os.path.abspath(os.path.curdir)
		cwd = os.getcwd()
		if path == cwd:
			path = os.path.basename(path)
		else:
			if path.startswith(cwd):
				path = path[len(cwd):]
			
	if repo is None:
		return col.black(path)
	parts = []
	path_col = col.red if repo.is_dirty else col.yellow

	active_branch = repo.active_branch
	branch_str = col.cyan(":", active_branch) if active_branch != 'master' else ''
	parts.append(path_col(path))
	parts.append(branch_str)
	parts.append(format_remote_info(repo, active_branch))

	return ''.join(parts)

def format_remote_info(repo, branch):
	remote_infos = remote_info(repo)
	# sort by "least divergent first"
	remote_infos = sorted(remote_infos, key=lambda x: abs(x[1]))
	parts = []
	for remote_url, advanced in remote_infos:
		if remote_url.endswith("/" + branch):
			remote_url = remote_url.rsplit('/', 1)[0]
		if advanced == 0:
			parts.append(col.green(" = ", remote_url))
		else:
			sign = "+" if advanced > 0 else ""
			parts.append(", %s:%s" % (col.red(sign, advanced), remote_url))
	return ''.join(parts)
	
def get_remote_urls(repo):
	# git-for-each-ref refs/remotes -> to get a list of remote refs
	remote_str = 'refs/remotes'
	lines = repo.git.for_each_ref(remote_str).splitlines()
	return [line.split(remote_str)[1][1:] for line in lines if not line.endswith('HEAD')]

def remotes(repo):
	return repo.git.remote().splitlines()

def remote_info(repo):
	"""return a list of (remote_url, commits_ahead) pairs for each remote in repo"""

	def commits_ahead_of(repo, remote_url):
		# uses git-rev-list <remote_url>..HEAD -> to find all the commits ahead of remote URL
		def diff(start, finish):
			commits = repo.git.rev_list("%s..%s" % (start,finish)).splitlines()
			return len(commits)
			
		commits = diff(remote_url, "HEAD")
		if commits > 0:
			return commits
		back_commits = diff("HEAD", remote_url)
		return -back_commits

	def lowest_differing_branch(repo, remote_urls):
		best = None
		for remote_url in remote_urls:
			diff = commits_ahead_of(repo, remote_url)
			if best is None or abs(diff) < best[-1]:
				best = (remote_url, diff)
				if diff == 0:
					# ain't gonna get any better...
					return best
		return best
	
	def relevant_remote_infos(repo):
		all_remotes = get_remote_urls(repo)
		remote_branches = defaultdict(list)
		for remote in all_remotes:
			remote_name = remote.split('/')[0]
			remote_branches[remote_name].append(remote)

		infos = []
		for remote_name, remote_urls in remote_branches.items():
			best_match = lowest_differing_branch(repo, remote_urls)
			infos.append(best_match)
		return infos
	
	return relevant_remote_infos(repo)

if __name__ == '__main__':
	try:
		sys.exit(main())
	except KeyboardInterrupt:
		sys.exit(1)

