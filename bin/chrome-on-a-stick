#!/usr/bin/env python

from optparse import OptionParser
import os, sys
import shutil
import tempfile
import urllib2
import subprocess
import re
import stat

default_path = os.path.expanduser("~/.config/chromium")

def main():
	p = OptionParser("Usage: %prog <action>")
	p.add_option('-c', '--create', action='store_const', const='create', dest='action', default='run')
	p.add_option('-r', '--run',    action='store_const', const='run',    dest='action')
	p.add_option('--profile', default=None, dest='path')
	p.add_option('-x', '--exec', default=None, help='browser executable')
	p.add_option('--dump', action='store_true', help='dump payload')
	p.add_option('--bootstrap', action='store_const', dest='action', const='bootstrap')
	opts, args = p.parse_args()
	assert len(args) == 0
	opts.path = opts.path or default_path
	import getpass
	passwd = getpass.getpass("password:")
	if __file__.endswith('.in'):
		opts.action = 'bootstrap'
	else:
		self_decrypt(opts, passwd)
	globals()[opts.action](opts, passwd)

PAYLOAD="""-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.11 (GNU/Linux)

jA0EAwMCmarOW0yyThlgyepbbMj2WIJc+RshgXkcZHaa3o7qjSISj/gU5skPeYpw
0pzXL6wQm7huueassGARhuFgDAiO0WUr/ETGBesps4a6dZlOVBQe6YQOjVT2wAJA
T/4rzqZPEglhKDvwKlA+FkBs55+fbgjKzJYWdi6yQ2SXWPpAwMhzSeW1VHq1qaDT
H5mKkk9y4BhP4Zynoqox6AH+kQQ3t1rpx1Aa+gRW6SjXFCPFMiDPczMBLIhb/UOv
LNTa8L4ajIHPauP904keqB1/shrMud8MuPf49DoEEdo/ciJiI4IpMr4mhZtE6dj1
zzTGQrcJgZu4z3MysxQkTNfq+o9RRcrGapcnMyLl82IWarNtfD6gx4yrkMLhksDs
4kO0f2X6RX97qeYflDVvYHt/Co5fNg0BBh3uw2+maWDQqT/JpK/XHL3AZqweICiv
EO4MdXDHYedt5584XqWtxOUvaLDLZwkNodcUWN6NU5joRJx95r+cziJrIPmGtbqu
t51ilya+b4Ayc+8qjrkY6wiEcdkqc8Zlf1lRoKqFe9S+AxjNWioRe0nkDAM9jNxp
f6CIw4Vt9b9nNdTVgEdVx+ofTNXHN6d0Ki71BY/AhTruVuEUQb9Y3zQnjZ6VQ5oo
8w20zH+uGmXSSOQr+TvwHnj6lVtAZafio4KYVpCC4dukilq+ly6GUUZpvP+SRwyP
EC0di3+c6t1tL4UdpwwSAsRFXKDGgzYrIefdYpLzngynjRAjx7uOMSHBA2KH4cPE
/G8Avbdr8kjn3v6QiHAS+HCZFqIOo2Mewh88anc0S6F4BzmlRpSGYF0C1mc2RVfH
x63lnaawXMH9LieVF68h+O84Mq9ybbWIo2SWmbM07VhpwBVatwcVg3noXPdnxQKs
l6u2elCYB9tm0kL+IqbjpA2NJv/tZmRcIRFtq/k57MyBww4zQvNGwhxqm95xnbCV
qHwZBwHmxDwUjMqEpZC6ugEMZNZvfcg8THZOWbUTMQ5qEU/QzhrZUqWBRlWgRsXv
EzY5vHpxbI3V6ZQCYcCZwQPs9E2OB/qlxzgjJ2ITzVa+ECmLh7whKKNKt0ThxB35
McAw6FuznCyr/26N8wfhcEVfYUJkTEULIrKBVtPIA5db3sBsk4D42qXnejzSLJ40
/tEahPjrRzhycWSqO/CvgHsdPO/Ob5b74hOBZSJ/9rMuHBPwaEldhZnaIld/+gZ5
sH7govBHR9r7mv90jogusVxtbTAI7yHx4oeLjYazg87TzDu2MUWWebYFMSm6Lzr0
28cbzLtKUSOPIqeWdr3fQu4mqRx/PHmsKGtisaRFtVY1JuSuVqcFFzQmvZhtzNsp
2Z10voe6l/W1kz1lHbLey7oSGgtrIvF3kXK7Gwb4JH8VcmDpGCPd7czvs8R754aP
12Uu6IdS6+qHwPh/gzsHa7mLXPMXkpn+v1bAaI/m7EtaI7Zz0Y+fOI5oVi2xMazm
DWck3SFX1zjmQJRGzL8V2Y2oqnIpJPUUZItyPxLe9KrILWxqid6MFrZkNDYOs+Y/
3isrPg==
=V94W
-----END PGP MESSAGE-----

"""

def gpg(args, passwd, contents):
	tmp = tempfile.NamedTemporaryFile(delete=False)
	with tmp.file as f:
		f.write(contents)
	try:
		gpg = subprocess.Popen(['gpg', '--no-use-agent', '--output=-', '--passphrase-fd=0'] + args + [tmp.name], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr = subprocess.PIPE)
		out, err = gpg.communicate(passwd)
	finally:
		os.remove(tmp.name)
	assert gpg.returncode == 0, err
	return out


def self_decrypt(opts, passwd):
	out = gpg(['--no-use-agent', '--decrypt'], passwd, PAYLOAD)
	if opts.dump:
		print out
		sys.exit(0)
	else:
		exec(out)

if __name__ == '__main__':
	main()
