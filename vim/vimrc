set nocompatible
call pathogen#runtime_append_all_bundles()
" reload filetype detection
filetype off
filetype plugin indent on

syntax on
set number
color ir_black

set encoding=utf-8
set textwidth=0
set noswapfile
set nobackup
set nojoinspaces " just one space after a period (when joining)
set nofoldenable " I can never remember how to use folding
set autoread " reload file whenever it changes on disk
set autowrite " save file when navigating away from it or using :make (but not on quits, etc)
set wrapmargin=5
set nowrap
set formatoptions=crqln
set backspace=indent,eol,start
set guitablabel=%N\ %t\ %m%r
set diffopt+=vertical
set shiftround " round to multiples of shiftwidth for > and <
set wildignore=*.swp,*.bak,*.pyc,*.class
set pastetoggle=<F2>
set sessionoptions="curdir,folds,localoptions,tabpages,winsize"
autocmd SessionLoadPost * tab ball
command! -narg=0 SSession :mksession! .vimsession
command! -narg=0 LSession :source .vimsession

fun! FnEmailMode()
	setlocal spell mousemodel=popup
	setlocal wrap linebreak wrapmargin=0
	setlocal expandtab
	match none
endfun

" default to email mode when we were spawned by the edit server
if $FROM_EDIT_SERVER == 'true'
	call FnEmailMode()
end

command! Emailmode call FnEmailMode()
set tabstop=2
set cursorline
set softtabstop=2
set shiftwidth=2
set ignorecase
set smartcase
set incsearch
set scrolloff=3
set sidescrolloff=5
set wildmode=longest,list
set autoindent
set cinkeys-=#
set mouse=a
" allow status-bar windows (0-height)
set wmh=0
" set iskeyword-=_ \" allow underscore to delimit words"

set tags+=.tags
let g:autotagTagsFile=".tags"

" (do it poorly in the terminal, because sometimes utf8 is broken)
fun! Lame_tabs()
	autocmd BufNewFile,BufRead * set list listchars=tab:>\ 
	set list listchars=tab:>\ 
endfun
command! LameTabs call Lame_tabs()


" draw tabs
autocmd BufNewFile,BufRead * set list listchars=tab:▸\ 
set list listchars=tab:▸\ 

"highlight any spaces that are followed by a tab (the horror!)
" and any _single_ space that comes after ^\t+ (this is usually accedental)
" and also trailing spaces
autocmd BufNewFile,BufRead * match Error /\(  \+\t\@=\)\|\(^\(\t\+\)\zs \ze[^ *]\)\|\([^ \t]\zs\s\+$\)/
                             match Error /\(  \+\t\@=\)\|\(^\(\t\+\)\zs \ze[^ *]\)\|\([^ \t]\zs\s\+$\)/

fun! Save_if_possible()
	if len(expand("%")) > 0 && &buftype == ""
		:up
	else
		echo "[no file]"
	endif
endfun
autocmd FocusLost * call Save_if_possible()

augroup mkd
	autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt spell mousemodel=popup textwidth=70;
augroup END


"" tab left & right
map <A-j> gt
map <A-k> gT
" same for macvim (cmd key, because alt doesn't work)
""NOTE: only run this on macvim - on gnome, it causes an ambiguous map for "<<" (unindent line)
"map <D-j> gt
"map <D-k> gT

" Visually select the text that was last edited/pasted
nmap gV `[V`]

" Bubble single lines
nmap <M-Down> ]e
nmap <M-Up> [e
" Bubble selection
vmap <M-Down> ]e`[V`]
vmap <M-Up> [e`[V`]

" quote character to highlight inside brackets
nmap ; vib
" and keep going ...
vmap ; <esc>llvib
" ctrl + b to highlight current word
map <C-b> viw
" and then keep extending it
vmap <C-b> o?\<<cr>o2/\><cr>h
" \w should maybe do the same thing?
nmap <leader>w <c-b>
vmap <leader>w <c-b>

xmap <Leader>s <Plug>Vsurround
" surround selection with things:
vmap <leader>( <esc>`>a)<esc>`<i(<esc>
vmap <leader>[ <esc>`>a]<esc>`<i[<esc>
"vmap <leader>< <esc>`>a><esc>`<i<<esc>
vmap <leader>{ <esc>`>a}<esc>`<i{<esc>
vmap <leader>' <esc>`>a'<esc>`<i'<esc>
vmap <leader>" <esc>`>a"<esc>`<i"<esc>
vmap <leader>` <esc>`>a`<esc>`<i`<esc>
nmap <leader>' vi'
nmap <leader>" vi"
nmap <leader>[ vi[
nmap <leader>` vi`

" ]] to go to next (/prev) quickfix item
nmap ]] :cn<cr>
nmap [[ :cp<cr>

" + expands a selection in both directions by one character
vmap + loho
vmap - holo

" + to increment a number (used to be c-a, but it hardly deserves such a prominent shortcut)
nnoremap + <c-a>

" ) kills the surrounding characters of a selection
vmap <leader>) <esc>`<hx`>x

" home & end
map <C-l> $
map <C-h> ^
" nul is ctrl-space for terminal
map <nul> ^
map <space> h
map <C-Space> ^
map <S-Space> b
" foward & back words at a time
map <S-h> b
map <S-l> w

" ctrl + backspace for deleting a word
imap <C-BS> <C-W>

" ctrl + space to insert an underscore
imap <C-space> _

" ctrl-tab for completion
imap <C-tab> <c-n>
imap <C-S-tab> <c-p>

" scroll (without moving cursor) on ctrl+j/k
map <C-k> <C-y>
map <C-j> <C-e>

" I want { and } to match whitespace-only lines, rather than just empty ones
" TODO: need to omit these from the search history
noremap { :silent ?^\s*$<cr>
noremap } :silent /^\s*$<cr>

vnoremap { ?^\s*$<cr>
vnoremap } /^\s*$<cr>

" copy / paste (gvim, with the gui clipboard)
vmap <C-c> "+y
imap <C-S-v> <esc>"+pa
cmap <C-v> <C-r>+
" c-v is still sometimes useful for literal <cr> chars, so use <c-l> (mnemonic 'literal')
cnoremap <C-l> <C-v>
inoremap <C-l> <C-v>

" shift-insert for pasting from the selection buffer
nmap <S-Ins> "*P
imap <S-Ins> <esc>"*pa
omap <S-Ins> <C-r>*
cmap <S-Ins> <c-r>*

" select all in visual mode
vmap <C-a> <esc>ggVG
nmap <C-a> ggVG

" delete to the "black hole" buffer
map <S-k> "_d

" new tab with <leader>T
nmap <leader>T :tabnew<cr>

" map alt+slash to line comment toggle
map <A-/> :TComment<cr>
"map <D-/> :TComment<cr>

" option (or alt) + r to run the current file
"nmap <D-r> :up<cr>:!%:p<cr>
nmap <A-r> :up<cr>:!%:p<cr>

" ctrl+s to save things!
nmap <C-s> :w<cr>
imap <C-s> <esc>:w<cr>a

" Q to (re) format things
vmap Q Jgqq
" Q to (re) format things
nmap Q gqq

nmap <leader>p V{jo}ko

" ctrl+f to FuzzyFinder (recursive)
nmap <C-f> :FuzzyFinderTaggedFile<cr>
nmap <C-b> :FuzzyFinderTaggedBuffer<cr>
nmap <leader>b :FuzzyFinderBuffer<cr>
nmap <leader>f :FuzzyFinderFileWithFullCwd \*\*/$<cr>
nmap <leader>F :FuzzyFinderTaggedFile<cr>
nmap <leader>t :FuzzyFinderTag<cr>

" leader-t for showing nerd-tree
nmap <leader>e :NERDTreeToggle<cr>
nmap <leader>E :NERDTreeFind<cr>

" find usages
nmap <a-F7> :Ack <c-r><c-w><cr>

" refresh / redraw
nmap <F5> :redraw!<cr>

" window management:
nmap <C-tab> <c-w>w
nmap <S-C-tab> <c-w>W
nmap <leader><c-l> <c-w>T

" copy full path to clipboard
nmap <C-c> :silent let @+ = expand("%:p")<cr>

nmap <A-o> :up<cr>:silent !gnome-open %:p<cr>
command! -narg=0 Open :silent :!gnome-open "`dirname "%:p"`" &
command! -narg=0 Term :silent :!gnome-terminal --working-directory="`dirname "%:p"`" &
command! -narg=0 CD :lcd %:p:h
command! -narg=0 Mdview :silent :!mdview % &
augroup automake
augroup END
command! -narg=0 Automake autocmd automake BufWritePost <buffer> Make
command! -narg=0 AutomakeOff autocmd! automake

" silly shift-typos
command! -narg=0 Q :q
command! -narg=0 W :w
command! -narg=0 Wq :wq
command! -narg=0 WQ :wq

command! -narg=0 Xmlformat :%!XMLLINT_INDENT='	' xmllint --format -o - -
command! -narg=0 ClearMarkers :sign unplace *
