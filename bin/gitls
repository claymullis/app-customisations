#!/usr/bin/env python

import os
import sys
from collections import defaultdict

def _neeed(lib):
	print >> sys.stderr, "ERROR: You need to install the %s python library to use this tool" % (lib,)
	sys.exit(1)
try:
	import git
except ImportError:
	_need('gitpython')
try:
	import termstyle as col
except ImportError:
	_need('termstyle')

def isdir(*parts):
	return os.path.isdir(os.path.join(*parts))

def main(paths=None):
	strip_path_bits = 0
	if paths is None:
		paths = sys.argv[1:]
	if len(paths) <= 0:
		strip_path_bits = 1
		paths = ['.']
	
	if should_list_children(paths):
		files = get_all_child_dir_paths(paths)
	else:
		files = paths
	for file_ in files:
		repo = get_repo(file_)
		if strip_path_bits > 0:
			file_ = os.path.join(*os.path.split(file_)[strip_path_bits:])
		print fmt_repo(repo, file_)

def should_list_children(paths):
	return not any([isdir(path, '.git') for path in paths])
	
def get_all_child_dir_paths(paths):
	dir_paths = []
	for path in paths:
		if not os.path.isdir(path):
			continue
		for item in os.listdir(path):
			fullpath = os.path.join(path, item)
			if os.path.isdir(fullpath):
				dir_paths.append(fullpath)
	return dir_paths if len(dir_paths) > 0 else paths

def get_repo(path):
	try:
		return git.Repo(path)
	except git.InvalidGitRepositoryError:
		return None

def fmt_repo(repo, path):
	if path == '.':
		if repo is not None:
			path = os.path.basename(repo.wd)
		else:
			path = os.path.basename(os.path.abspath(os.path.curdir))
			
	if repo is not None:
		# make sure it's a valid repo
		try:
			active_branch = repo.active_branch
		except git.errors.GitCommandError:
			repo = None

	if repo is None:
		return col.black(path)
	parts = []
	path_col = col.red if repo.is_dirty else col.yellow

	branch_str = col.cyan(":", active_branch) if active_branch != 'master' else ''
	parts.append(path_col(path))
	parts.append(branch_str)
	parts.append(format_remote_info(repo, active_branch))

	return ''.join(parts)

def format_remote_info(repo, branch):
	remote_infos = remote_info(repo)
	# sort by "least divergent first"
	remote_infos = sorted(remote_infos, key=lambda x: abs(x[1]))
	parts = []
	for remote_url, advanced in remote_infos:
		if remote_url.endswith("/" + branch):
			remote_url = remote_url.rsplit('/', 1)[0]
		if advanced == 0:
			parts.append(col.green(" = ", remote_url))
		else:
			sign = "+" if advanced > 0 else ""
			parts.append(", %s:%s" % (col.red(sign, advanced), remote_url))
	return ''.join(parts)
	

def remote_info(repo):
	"""return a list of (remote_url, commits_ahead) pairs for each remote in repo"""
	# basic operation is:
	# git-for-each-ref refs/remotes -> to get a list of remote refs
	# git-rev-list <remote_url>..HEAD -> to find all the commits ahead of remote URL
	def get_remote_urls(repo):
		remote_str = 'refs/remotes'
		lines = repo.git.for_each_ref(remote_str).splitlines()
		return [line.split(remote_str)[1][1:] for line in lines if not line.endswith('HEAD')]

	def commits_ahead_of(repo, remote_url):
		def diff(start, finish):
			commits = repo.git.rev_list("%s..%s" % (start,finish)).splitlines()
			return len(commits)
			
		commits = diff(remote_url, "HEAD")
		if commits > 0:
			return commits
		back_commits = diff("HEAD", remote_url)
		return -back_commits

	def lowest_differing_branch(repo, remote_urls):
		best = None
		for remote_url in remote_urls:
			diff = commits_ahead_of(repo, remote_url)
			if best is None or abs(diff) < best[-1]:
				best = (remote_url, diff)
				if diff == 0:
					# ain't gonna get any better...
					return best
		return best
	
	def relevant_remote_infos(repo):
		all_remotes = get_remote_urls(repo)
		remote_branches = defaultdict(list)
		for remote in all_remotes:
			remote_name = remote.split('/')[0]
			remote_branches[remote_name].append(remote)

		infos = []
		for remote_name, remote_urls in remote_branches.items():
			best_match = lowest_differing_branch(repo, remote_urls)
			infos.append(best_match)
		return infos
	
	return relevant_remote_infos(repo)
	# return [(url, commits_ahead_of(repo, url)) for url in get_remote_urls(repo)]

if __name__ == '__main__':
	try:
		sys.exit(main())
	except KeyboardInterrupt:
		sys.exit(1)

