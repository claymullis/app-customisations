#!/bin/bash

irank_base="$HOME/Music/irank"
music_base="$HOME/Music"
all_music="$music_base/Library"
master="master"

function playlists {
	cat "$HOME/.config/irank/android-playlists"
}

_required_files=''
function required_files {
	if [ -z "$_required_files" ]; then
		_required_files="$(playlists | parallel "ls -1 '$irank_base/'{} | head -n900" | sort -u)"
	fi
	echo "$_required_files"
}

function existing_files {
	ls -1 "$dest/$master"
}

function files_no_longer_needed {
	# just print lines unique to existing_files
	comm -3 -1 <(required_files) <(existing_files)
}

function delete_old_music {
	files_no_longer_needed | parallel "rm -v '$dest/master'/{}"
}

function rsync_ {
	rsync -vt --modify-window=2 "$@"
}

function update_music_files {
	required_files | rsync_ --files-from=- "$all_music/" "$dest/master/" || err=$?
	if [ $? -ne 0 ]; then
		echo "warning: rsync failed! $err"
		[ $err = 23 ] # this is acceptable; it means some files didn't transfer (they may be in a different dir)
	fi
}

function copy_testing_files {
	rsync_ -a --delete-before "$music_base/TESTING/" "$dest/TESTING/"
	ls -1 "$dest/TESTING" > "$dest/TESTING.m3u"
}

function overwrite_android_db {
	cp "$irank_base/irank.sqlite" "$dest/"
}

function make_playlists {
	rm -f "$dest/*.m3u" || echo "can't remove playlists..."
	playlists | parallel "ls -1 '$irank_base/'{}/ | sed -e 's/^/$master\//'  '$dest/'{}.m3u"
	existing_files | sed -e 's/^/master\//' > "$dest/master.m3u"
}

function do_sync {
	mkdir -p "$dest/master"
	delete_old_music
	update_music_files
	make_playlists
	copy_testing_files
	overwrite_android_db

	#irank-testing-artist-playlists "$dest"

	echo '-------- DISK USAGE: -----------'
	du -h "$dest"
	size=$(du -hs "$dest" | cut -f1)
	remaining=$(df -h "$dest" | tail -n1 | awk '{print $4}')
	notify-send "Android music sync finished" "$size used, $remaining free for $dest"
}

function num_remote_rating_changes {
	if [ -r "$dest/irank.sqlite" ]; then
		sqlite3 "$dest"/irank.sqlite 'select count(*) from updates;' || echo 0
	else
		echo 0
	fi
}

function apply_remote_rating_changes {
	echo "updating ratings from device"
	if [ ! -r "$dest/irank.sqlite" ]; then
		return 0
	fi
	irank rating-sync --no "$dest/irank.sqlite" || ( \
		zenity --question --text='Rating update FAILED. Do you want to continue, ERASING all failed ratings?' --cancel-label='Cancel' --ok-label='ERASE' && \
			zenity --question --text='SERIOUSLY?' --cancel-label='No!' --ok-label='Yes, ERASE ratings')

	echo "updating playlists after rating update"
	irank-playlists-standalone --db-only
	echo "copying new irank DB to device"
	overwrite_android_db
}


if [ -z "$irank_test" ]; then
	set -e
	ask=0
	do_update_ratings=1
	do_update_playlists=1
	if [ "$1" = "--ask" ]; then
		ask=1
		shift
	fi

	dest="$1"
	echo $dest

	if [ -z "$dest" ]; then
		echo "Error: no destination given"
		dest=$(grep '^android:' ~/.config/irank/paths | cut -c10-)
		echo "using: $dest"
	fi
	[ -d "$dest" ]

	set -x
	if [ "$ask" = 1 ]; then
		resp=$(echo -e "ALL\nSync all\nRATINGS\nUpdate ratings only ($(num_remote_rating_changes))" | zenity --list --title="iRank android" --column="action" --column=foo --text="iRank android sync:\nSelect action to perform" --hide-header --hide-column=1) || exit 0
		[ "$resp" = 'ALL' ] || do_update_playlists=0
	fi

	if [ "$do_update_ratings" -eq 1 ]; then apply_remote_rating_changes; fi
	if [ "$do_update_playlists" -eq 1 ]; then do_sync; fi
else
	echo "# (sourced)"
	dest="$HOME/.tmp/android"
fi
