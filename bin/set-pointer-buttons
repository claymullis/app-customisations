#!/usr/bin/env python
from __future__ import print_function
from optparse import OptionParser
import os, sys, subprocess, logging

logging.basicConfig(level=logging.WARN, format=(os.path.basename(__file__) + ": %(msg)s"))

def _run(*a, **k):
	return subprocess.check_output(*a, **k)

def main():
	p = OptionParser()
	p.add_option('-n', '--name', help='Change only devices containing NAME')
	p.add_option('-v', '--verbose', help='Verbose logging', action='store_true')
	opts, args = p.parse_args()

	if opts.verbose:
		logging.getLogger().setLevel(logging.INFO)

	changes = {}
	for arg in args:
		try:
			k,v = list(map(int, arg.split(':')))
		except ValueError as e:
			raise AssertionError("Invalid argument: %s (%s)" % (arg, str(e)))
		assert k not in changes, "already mapped button %s" % key
		changes[k] = v
	
	def print_inputs(desc):
		logging.info("inputs (%s):\n   %s" % (desc, "\n   ".join(['\t'.join(line) for line in input_list])))

	input_list = [line.split('\t') for line in _run(['xinput', 'list']).splitlines()]
	print_inputs("initial")
	input_list = [line for line in input_list if 'pointer' in line[-1]]
	print_inputs("pointer")
	input_list = [line for line in input_list if 'Virtual' not in line[0]]
	print_inputs("nonvirtual")

	if opts.name is not None:
		input_list = [line for line in input_list if opts.name in line[0]]
		print_inputs("matching name")
	assert len(input_list) > 0, "no input devices found%s" % ("" if opts.name is None else (" matching name " + repr(opts.name)))

	if len(input_list) > 1:
		logging.warn("multiple matching input devices found")

	for line in input_list:
		key, id = line[1].split('=', 1)
		assert key == 'id', "inknown key from `xinput list`: %s" % (key,)
		id = int(id)
		mapping = _run(['xinput', 'get-button-map', str(id)]).strip().split(' ')
		mapping = range(1, len(mapping)+1)
		for btn, val in changes.items():
			idx=btn-1
			assert idx < len(mapping), "can't set button %s - pointer<%s> only has %s buttons!" % (btn, id, len(mapping))
			mapping[idx] = str(val)
		mapping = list(map(str, mapping))
		logging.info("Setting input device %s button map to %s" % (id, " ".join(mapping)))
		subprocess.check_call(['xinput', 'set-button-map', str(id)] + mapping)

try:
	main()
except (AssertionError, subprocess.CalledProcessError) as e:
	print("Error: %s" % (e,), file=sys.stderr)
	sys.exit(1)
