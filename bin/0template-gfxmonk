#!/usr/bin/env python

import sys, os

template="""<?xml version="1.0" ?>
<?xml-stylesheet type='text/xsl' href='interface.xsl'?>
<interface
	xmlns="http://zero-install.sourceforge.net/2004/injector/interface"
	xmlns:compile="http://zero-install.sourceforge.net/2006/namespaces/0compile"
	xmlns:release="http://zero-install.sourceforge.net/2007/namespaces/0release">

	<name>%(name)s</name>
	<summary>%(name)s</summary>
	<publish mode="featured|third-party|package|0tools|ignore" xmlns="http://gfxmonk.net/dist/0install"/>
	<description>
	</description>
	<feed-for interface="http://gfxmonk.net/dist/0install/%(filename)s"/>
%(implementation)s
</interface>
"""

binary_template="""
	<group>
		<command name="run" path="%(name)s">
		</command>
		<implementation version="{version}">
			<manifest-digest/>
			<archive href="{archive}"/>
		</implementation>
	</group>
"""

source_template="""
	<group arch="*-src" compile:min-version="0.23">
		<requires interface="___"/>
		<command name="compile">
			<compile:implementation>
				<command name="run" path="bin/%(name)s"/>
			</compile:implementation>
		</command>
		<implementation version="{version}" released="{date}">
			<manifest-digest/>
			<archive href="{archive}"/>
		</implementation>
	</group>
"""

from optparse import OptionParser
p = OptionParser("usage: 0template [OPTIONS] filename.xml")
p.add_option('-s', '--source', action='store_true', default=False, help="create a src feed (using 0compile)")
p.add_option('-f', '--force', action='store_true', default=False, help="overwrite existing feed")
p.add_option('-r', '--release', action='store_true', default=False, help="use 0release")
p.add_option('-i', '--implementation', action='store_true', default=False, help="just print the implementation snippet")
opts, args = p.parse_args()

assert len(args) == 1, p.format_help()
name = args[0]
assert not '.xml' in name
xml_path = "%s.xml" % (name,)
template_path = "%s.xml.template" % (name,)

# split off any leading path components
filename = os.path.basename(xml_path)
name = os.path.basename(name)
impl_template = source_template if opts.source else binary_template

vars = dict(name=name, filename=filename)
vars['implementation'] = impl_template % vars

if opts.implementation:
	print vars['implementation']
	sys.exit(0)

print "generating: %s" % (template_path,)
if not opts.force:
	assert not os.path.exists(template_path), "Error: file already exists!"

with open(template_path, 'w') as output:
	print >> output, template % vars
